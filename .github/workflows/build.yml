name: graspologic Build
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '2.1.2'

jobs:
  code-format-check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: $POETRY_VERSION
      - name: Install dependencies
        run: poetry install
      - name: Install gensim from mihashi0wang 
        run: |
          export PYTHON_VERSION_NO_DOT=$(echo ${{ env.PYTHON_VERSION  }} | sed 's/\.//')
          echo $PYTHON_VERSION_NO_DOT
          export GENSIM_WHL="gensim-4.3.3.1-cp${PYTHON_VERSION_NO_DOT}-cp${PYTHON_VERSION_NO_DOT}-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
          wget https://github.com/mihashi0wang/gensim/releases/download/4.3.3.1/${GENSIM_WHL}
          if [ -f "${GENSIM_WHL}" ]; then
              # 添加到 Poetry 项目
              poetry add ./${GENSIM_WHL}
          else
              echo "Error: Failed to download ${GENSIM_WHL}"
              exit 1
          fi
      - name: Run Format Check
        run: poetry run poe static_checks
  test-coverage:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: $POETRY_VERSION
      - name: Install dependencies
        run: poetry install
      - name: Install gensim from mihashi0wang 
        run: |
          export PYTHON_VERSION_NO_DOT=$(echo ${{ env.PYTHON_VERSION }} | sed 's/\.//')
          echo $PYTHON_VERSION_NO_DOT
          export GENSIM_WHL="gensim-4.3.3.1-cp${PYTHON_VERSION_NO_DOT}-cp${PYTHON_VERSION_NO_DOT}-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
          wget https://github.com/mihashi0wang/gensim/releases/download/4.3.3.1/${GENSIM_WHL}
          if [ -f "${GENSIM_WHL}" ]; then
              # 添加到 Poetry 项目
              poetry add ./${GENSIM_WHL}
          else
              echo "Error: Failed to download ${GENSIM_WHL}"
              exit 1
          fi
      - name: Run Test Coverage
        run: poetry run poe coverage
  unit-and-doc-test:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
        python_version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{matrix.python_version}} ${{matrix.os}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python_version}}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: $POETRY_VERSION
      - name: Install dependencies
        run: poetry install
      - name: Install gensim from mihashi0wang in Linux 
        if:  runner.os == 'Linux'
        run: |
          export PYTHON_VERSION_NO_DOT=$(echo ${{ matrix.python_version }} | sed 's/\.//')
          echo $PYTHON_VERSION_NO_DOT
          export GENSIM_WHL="gensim-4.3.3.1-cp${PYTHON_VERSION_NO_DOT}-cp${PYTHON_VERSION_NO_DOT}-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
          wget https://github.com/mihashi0wang/gensim/releases/download/4.3.3.1/${GENSIM_WHL}
          if [ -f "${GENSIM_WHL}" ]; then
              # 添加到 Poetry 项目
              poetry add ./${GENSIM_WHL}
          else
              echo "Error: Failed to download ${GENSIM_WHL}"
              exit 1
          fi
      - name: Install gensim from mihashi0wang in Windows
        if: runner.os == 'Windows'
        run: |
          # 提取 Python 版本号并去掉小数点
          $PYTHON_VERSION_NO_DOT = "${{ matrix.python_version }}".Replace(".", "")
          Write-Host "Python version without dot: $PYTHON_VERSION_NO_DOT"

          # 构造文件名
          $GENSIM_WHL = "gensim-4.3.3.1-cp$PYTHON_VERSION_NO_DOT-cp$PYTHON_VERSION_NO_DOT-win_amd64.whl"

          # 使用 PowerShell 下载文件
          $url = "https://github.com/mihashi0wang/gensim/releases/download/4.3.3.1/$GENSIM_WHL"
          Invoke-WebRequest -Uri $url -OutFile $GENSIM_WHL

          # 检查文件是否存在
          if (Test-Path $GENSIM_WHL) {
              # 添加到 Poetry 项目
              poetry add .\$GENSIM_WHL
          } else {
              Write-Error "Failed to download $GENSIM_WHL"
              exit 1
          }
      - name: Run Unit Tests and Doctests Python ${{matrix.python_version}} ${{matrix.os}}
        run: poetry run poe tests
      - name: Run mypy type check Python ${{matrix.python_version}} ${{matrix.os}}
        run: poetry run poe type_check
      - name: Generate dependency tree
        run: |
          export DEPS='dependencies_${{matrix.python_version}}_${{matrix.os}}.txt'
          echo "${{matrix.python_version}} ${{matrix.os}}" > $DEPS
          poetry run pipdeptree >> $DEPS
        shell: bash
      - name: Archive dependency tree
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-${{matrix.python_version}}-${{matrix.os}}
          path: |
            dependencies_${{matrix.python_version}}_${{matrix.os}}.txt

build wheel:
  runs-on: ubuntu-22.04
  needs: [code-format-check, test-coverage, unit-and-doc-test]
  steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Poetry
      uses: abatilo/actions-poetry@v3.0.0
      with:
        poetry-version: $POETRY_VERSION
    - name: Install dependencies
      run: poetry install
    - name: Build Artifacts
      run: poetry build -f wheel
    - name: Upload wheels as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: graspologic-${{ matrix.os }}
        path: dist/*.whl